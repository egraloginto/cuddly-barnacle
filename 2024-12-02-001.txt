# First, ensure you're connected to your Azure account
# If not already connected, use: Connect-AzAccount

# Get current date and time for the filename
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$csvPath = ".\AzureStorageAudit_$timestamp.csv"

# Create an empty array to store our results
$results = @()

# Get all storage accounts in the subscription
$storageAccounts = Get-AzStorageAccount

foreach ($storageAccount in $storageAccounts) {
    # Get the network rules for the storage account
    $networkRules = $storageAccount.NetworkRuleSet
    
    # Check account-level public access setting
    $publicAccessAllowed = $storageAccount.AllowBlobPublicAccess
    
    # Initialize container access variable
    $containerAnonymousAccess = "No containers with anonymous access"
    
    # Only check container-level settings if public access is enabled at account level
    if ($publicAccessAllowed) {
        try {
            # Get all containers in the storage account
            $containers = Get-AzStorageContainer -Context $storageAccount.Context -ErrorAction Stop
            
            # Check if any containers allow anonymous access
            $anonymousContainers = $containers | Where-Object { $_.PublicAccess -ne "None" }
            if ($anonymousContainers) {
                $containerDetails = $anonymousContainers | ForEach-Object {
                    "$($_.Name)($($_.PublicAccess))"
                }
                $containerAnonymousAccess = $containerDetails -join '; '
            }
        }
        catch {
            $containerAnonymousAccess = "Error checking containers: $($_.Exception.Message)"
            Write-Warning "Unable to check containers in $($storageAccount.StorageAccountName): $($_.Exception.Message)"
        }
    }
    else {
        $containerAnonymousAccess = "N/A - Public access disabled at account level"
    }
    
    # Determine the effective access state
    $effectiveAccessState = if (-not $publicAccessAllowed) {
        "Blocked at account level"
    }
    elseif ($containerAnonymousAccess -eq "No containers with anonymous access") {
        "Allowed at account level, but no containers enable it"
    }
    else {
        "Anonymous access enabled on some containers"
    }
    
    # Create a custom object for each storage account with the required properties
    $accountInfo = [PSCustomObject]@{
        'StorageAccountName'     = $storageAccount.StorageAccountName
        'ResourceGroup'          = $storageAccount.ResourceGroupName
        'DefaultAction'          = $networkRules.DefaultAction
        'HasVNetRules'          = if ($networkRules.VirtualNetworkRules.Count -gt 0) { 'Yes' } else { 'No' }
        'HasIPRules'            = if ($networkRules.IpRules.Count -gt 0) { 'Yes' } else { 'No' }
        'VNetRuleCount'         = $networkRules.VirtualNetworkRules.Count
        'IPRuleCount'           = $networkRules.IpRules.Count
        'PublicAccessAllowed'   = $publicAccessAllowed
        'AnonymousAccess'       = $containerAnonymousAccess
        'EffectiveAccessState'  = $effectiveAccessState
    }
    
    # Add the storage account info to our results array
    $results += $accountInfo
}

# Output the results to console as a formatted table
$results | Format-Table -AutoSize

# Export to CSV without padding
$results | Export-Csv -Path $csvPath -NoTypeInformation

Write-Host "`nAudit results have been saved to: $csvPath" -ForegroundColor Green