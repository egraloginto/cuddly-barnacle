# First, ensure you're connected to your Azure account
# If not already connected, use: Connect-AzAccount

# Get current date and time for the filename
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$csvPath = ".\AzureStorageAudit_$timestamp.csv"

# Create an empty array to store our results
$results = @()

# Get all storage accounts in the subscription
$storageAccounts = Get-AzStorageAccount

foreach ($storageAccount in $storageAccounts) {
    # Get the network rules for the storage account
    $networkRules = $storageAccount.NetworkRuleSet
    
    # Get blob service properties to check anonymous access
    $blobProperties = $null
    $allowBlobPublicAccess = "N/A"
    try {
        $blobProperties = Get-AzStorageServiceProperty -Context $storageAccount.Context -ServiceType Blob
        $allowBlobPublicAccess = $storageAccount.AllowBlobPublicAccess
    }
    catch {
        Write-Warning "Unable to get blob properties for $($storageAccount.StorageAccountName): $($_.Exception.Message)"
    }

    # Get file service properties to check anonymous access
    $fileProperties = $null
    $allowFileAnonymousAccess = "N/A"
    try {
        $ctx = $storageAccount.Context
        $shares = Get-AzStorageShare -Context $ctx -ErrorAction SilentlyContinue
        $allowFileAnonymousAccess = if ($shares.Where({$_.ShareProperties.AccessTier -eq "TransactionOptimized"}).Count -gt 0) {
            "Possible" # If transaction-optimized shares exist, anonymous access might be possible
        } else {
            "No"
        }
    }
    catch {
        Write-Warning "Unable to get file properties for $($storageAccount.StorageAccountName): $($_.Exception.Message)"
    }
    
    # Create a custom object for each storage account with the required properties
    $accountInfo = [PSCustomObject]@{
        'StorageAccountName'    = $storageAccount.StorageAccountName
        'ResourceGroup'         = $storageAccount.ResourceGroupName
        'DefaultAction'         = $networkRules.DefaultAction
        'HasVNetRules'         = if ($networkRules.VirtualNetworkRules.Count -gt 0) { 'Yes' } else { 'No' }
        'HasIPRules'           = if ($networkRules.IpRules.Count -gt 0) { 'Yes' } else { 'No' }
        'VNetRuleCount'        = $networkRules.VirtualNetworkRules.Count
        'IPRuleCount'          = $networkRules.IpRules.Count
        'BlobPublicAccess'     = $allowBlobPublicAccess
        'FileAnonymousAccess'  = $allowFileAnonymousAccess
    }
    
    # Add the storage account info to our results array
    $results += $accountInfo
}

# Output the results to console as a formatted table
$results | Format-Table -AutoSize

# Export to CSV without padding
$results | Export-Csv -Path $csvPath -NoTypeInformation

Write-Host "`nAudit results have been saved to: $csvPath" -ForegroundColor Green