# Connect to Azure AD
Connect-AzureAD

# Array of role names to check
$targetRoles = @(
    "Global Administrator",
    "Privileged Role Administrator",
    "User Administrator",
    "SharePoint Administrator",
    "Exchange Administrator",
    "Hybrid Identity Administrator",
    "Application Administrator",
    "Cloud Application Administrator"
)

# Initialize results array
$results = @()

# Get role templates
$roleTemplates = Get-AzureADDirectoryRoleTemplate

# Get existing directory roles
$existingRoles = Get-AzureADDirectoryRole

# For each role template we're interested in
foreach ($roleTemplate in $roleTemplates) {
    if ($targetRoles -contains $roleTemplate.DisplayName) {
        # Check if role exists already
        $roleExists = $existingRoles | Where-Object { $_.RoleTemplateId -eq $roleTemplate.ObjectId }
        
        if (-not $roleExists) {
            # Enable role from template
            try {
                Enable-AzureADDirectoryRole -RoleTemplateId $roleTemplate.ObjectId
                # Get updated list of roles
                $existingRoles = Get-AzureADDirectoryRole
            }
            catch {
                Write-Warning "Could not enable role: $($roleTemplate.DisplayName). Error: $_"
                continue
            }
        }
        
        # Get the enabled role
        $role = $existingRoles | Where-Object { $_.RoleTemplateId -eq $roleTemplate.ObjectId }
        
        if ($role) {
            # Get members of this role
            $members = Get-AzureADDirectoryRoleMember -ObjectId $role.ObjectId
            
            foreach ($member in $members) {
                # Create custom object with relevant information
                $results += [PSCustomObject]@{
                    RoleName = $role.DisplayName
                    MemberType = if ($member.ObjectType -eq "User") { "User" } else { "Group" }
                    DisplayName = $member.DisplayName
                    UserPrincipalName = if ($member.UserPrincipalName) { $member.UserPrincipalName } else { "N/A" }
                    ObjectId = $member.ObjectId
                    Enabled = if ($member.AccountEnabled -ne $null) { $member.AccountEnabled } else { "N/A" }
                }
            }
        }
    }
}

# Export results to CSV
$results | Export-Csv -Path "AzureADAdminRoles_$(Get-Date -Format 'yyyyMMdd').csv" -NoTypeInformation

# Display results in console
$results | Format-Table -AutoSize -Wrap

# Disconnect from Azure AD
Disconnect-AzureAD