# Ensure AzureADPreview module is installed
# Install-Module -Name AzureADPreview -Force
# Import-Module AzureADPreview

# Connect to Azure AD
Connect-AzureAD

# Array of role names to check
$targetRoles = @(
    "Global Administrator",
    "Privileged Role Administrator",
    "User Administrator",
    "SharePoint Administrator",
    "Exchange Administrator",
    "Hybrid Identity Administrator",
    "Application Administrator",
    "Cloud Application Administrator"
)

# Initialize results array
$results = @()

# Function to process group members
function Get-GroupMembersRecursive {
    param (
        [string]$GroupObjectId,
        [string]$GroupName
    )
    
    $groupMembers = @()
    $members = Get-AzureADGroupMember -ObjectId $GroupObjectId -All $true
    
    foreach ($member in $members) {
        if ($member.ObjectType -eq "User") {
            $groupMembers += [PSCustomObject]@{
                DisplayName = "$($member.DisplayName) (${GroupName})"
                UserPrincipalName = $member.UserPrincipalName
                ObjectId = $member.ObjectId
                Enabled = $member.AccountEnabled
            }
        }
        elseif ($member.ObjectType -eq "Group") {
            $nestedMembers = Get-GroupMembersRecursive -GroupObjectId $member.ObjectId -GroupName "${GroupName} > $($member.DisplayName)"
            $groupMembers += $nestedMembers
        }
    }
    
    return $groupMembers
}

# Get tenant ID for PIM
$tenantID = (Get-AzureADTenantDetail).ObjectId

Write-Host "Getting role assignments..." -ForegroundColor Yellow

# Get role templates and existing roles
$roleTemplates = Get-AzureADDirectoryRoleTemplate
$existingRoles = Get-AzureADDirectoryRole

# Process each role template
foreach ($roleTemplate in $roleTemplates) {
    if ($targetRoles -contains $roleTemplate.DisplayName) {
        Write-Host "Processing role: $($roleTemplate.DisplayName)" -ForegroundColor Cyan
        
        # Check if role exists already
        $roleExists = $existingRoles | Where-Object { $_.RoleTemplateId -eq $roleTemplate.ObjectId }
        
        if (-not $roleExists) {
            try {
                Enable-AzureADDirectoryRole -RoleTemplateId $roleTemplate.ObjectId
                $existingRoles = Get-AzureADDirectoryRole
            }
            catch {
                Write-Warning "Could not enable role: $($roleTemplate.DisplayName). Error: $_"
                continue
            }
        }
        
        $role = $existingRoles | Where-Object { $_.RoleTemplateId -eq $roleTemplate.ObjectId }
        
        if ($role) {
            # Get permanent role members
            $members = Get-AzureADDirectoryRoleMember -ObjectId $role.ObjectId
            
            foreach ($member in $members) {
                if ($member.ObjectType -eq "User") {
                    $results += [PSCustomObject]@{
                        RoleName = $role.DisplayName
                        MemberType = "User"
                        DisplayName = $member.DisplayName
                        UserPrincipalName = $member.UserPrincipalName
                        ObjectId = $member.ObjectId
                        Enabled = $member.AccountEnabled
                        AssignmentType = "Permanent"
                    }
                }
                elseif ($member.ObjectType -eq "Group") {
                    $groupMembers = Get-GroupMembersRecursive -GroupObjectId $member.ObjectId -GroupName $member.DisplayName
                    
                    if ($groupMembers.Count -eq 0) {
                        # Empty group
                        $results += [PSCustomObject]@{
                            RoleName = $role.DisplayName
                            MemberType = "Group"
                            DisplayName = "($($member.DisplayName))"
                            UserPrincipalName = "N/A"
                            ObjectId = $member.ObjectId
                            Enabled = "N/A"
                            AssignmentType = "Permanent"
                        }
                    }
                    else {
                        foreach ($groupMember in $groupMembers) {
                            $results += [PSCustomObject]@{
                                RoleName = $role.DisplayName
                                MemberType = "User"
                                DisplayName = $groupMember.DisplayName
                                UserPrincipalName = $groupMember.UserPrincipalName
                                ObjectId = $groupMember.ObjectId
                                Enabled = $groupMember.Enabled
                                AssignmentType = "Permanent"
                            }
                        }
                    }
                }
            }
            
            # Get PIM role assignments
            Write-Host "Getting PIM assignments for role: $($roleTemplate.DisplayName)" -ForegroundColor Cyan
            try {
                $pimAssignments = Get-AzureADMSPrivilegedRoleAssignment -ProviderId "aadRoles" -ResourceId $tenantID |
                    Where-Object { $_.RoleDefinitionId -eq $role.RoleTemplateId }
                
                foreach ($pimAssignment in $pimAssignments) {
                    $subject = Get-AzureADObjectByObjectId -ObjectId $pimAssignment.SubjectId
                    
                    if ($subject.ObjectType -eq "User") {
                        $results += [PSCustomObject]@{
                            RoleName = $role.DisplayName
                            MemberType = "User"
                            DisplayName = $subject.DisplayName
                            UserPrincipalName = $subject.UserPrincipalName
                            ObjectId = $subject.ObjectId
                            Enabled = $subject.AccountEnabled
                            AssignmentType = "PIM"
                        }
                    }
                    elseif ($subject.ObjectType -eq "Group") {
                        $groupMembers = Get-GroupMembersRecursive -GroupObjectId $subject.ObjectId -GroupName $subject.DisplayName
                        
                        if ($groupMembers.Count -eq 0) {
                            $results += [PSCustomObject]@{
                                RoleName = $role.DisplayName
                                MemberType = "Group"
                                DisplayName = "($($subject.DisplayName))"
                                UserPrincipalName = "N/A"
                                ObjectId = $subject.ObjectId
                                Enabled = "N/A"
                                AssignmentType = "PIM"
                            }
                        }
                        else {
                            foreach ($groupMember in $groupMembers) {
                                $results += [PSCustomObject]@{
                                    RoleName = $role.DisplayName
                                    MemberType = "User"
                                    DisplayName = $groupMember.DisplayName
                                    UserPrincipalName = $groupMember.UserPrincipalName
                                    ObjectId = $groupMember.ObjectId
                                    Enabled = $groupMember.Enabled
                                    AssignmentType = "PIM"
                                }
                            }
                        }
                    }
                }
            }
            catch {
                Write-Warning "Could not get PIM assignments for role $($role.DisplayName). Error: $_"
            }
        }
    }
}

# Remove duplicates (in case a user has both PIM and permanent assignments)
$results = $results | Sort-Object ObjectId, RoleName -Unique

# Export results to CSV
$csvPath = "AzureADAdminRoles_$(Get-Date -Format 'yyyyMMdd').csv"
$results | Export-Csv -Path $csvPath -NoTypeInformation
Write-Host "`nResults exported to: $csvPath" -ForegroundColor Green

# Display results in console
$results | Format-Table -AutoSize -Wrap

# Disconnect from Azure AD
Disconnect-AzureAD